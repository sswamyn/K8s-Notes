user: 
cloud_user

pwd
K8Y1WyM$

IP
34.224.78.119

=== 
Our company is getting ready to launch a new website, and they need you to set up an nginx web server in their Kubernetes cluster. The nginx server will need to be accessible via network in the future, so you will need to expose port 80 as a containerPort for the nginx container. Your team has also asked you to ensure that nginx runs in quiet mode for the time being to cut down on unnecessary log output. You can do this by setting the command to nginx and passing the following arg to the container: -g daemon off; -q. As this nginx server belongs to the Web team, you will need to create it in the team's web namespace.

To summarize:

Use the nginx container image.
The container needs a containerPort of 80.
Set the command to nginx
Pass in the -g daemon off; -q args to run nginx in quiet mode.
Create the pod in the web namespace.
Once the pod is created, you should be able to find it with kubectl get pods -n web. Once the pod is created, you can get more information about its current status with kubectl describe pod nginx -n web.

====

apiVersion: v1
kind: Pod
metadata:
  name: nginx
  namespace: web
spec:
  containers:
  - name: nginx
    image: nginx
    command: ["nginx"]
    args: ["-g", "daemon off;", "-q"]
    ports:
    - containerPort: 80
	
## To check 	
kubectl create -f /home/cloud_user/nginx.yml

## also 
kubectl get pods -n web 
##############
Your company is nearing completion of their new mobile app, a candy-themed game. This application has some backend infrastructure the company plans to run using Kubernetes. They want to begin deploying one of their backend services to the cluster and have asked you to create a pod definition that meets the specifications required by the software. Create a pod definition in /home/cloud_user/candy-service-pod.yml, and then create a pod in the cluster using this definition to make sure it works.

The specifications are as follows:

The current image for the container is
	linuxacademycontent/candy-service:1

here is some configuration data the container will need:
	candy.peppermint.power=100000000
	candy.nougat-armor.strength=10

Foncfig data in : /etc/candy-service/candy.cfg 
ConfigMap in candy-service-config 
	which is mounted as a Vloume 
	
The container will need to run with the file system group with the id 2000. You will need to set this using the securityContext.
The container should expect to use 64MiB of memory and 250m CPU (use resource requests).
The container should be limited to 128MiB of memory and 500m CPU (use resource limits).
The container needs access to a database password in order to authenticate with a backend database server. The password is Kub3rn3t3sRul3s!. It should be stored in a secure fashion (as a Kubernetes secret called db-password) and passed to the container as an environment variable called DB_PASSWORD.
The container will need to access the Kubernetes API using the service account candy-svc. The service account already exists, so just configure the pod to use it.


### SOLUTION ###

Create a ConfigMap file:

vim candy-service-config.yml
Enter the following ConfigMap definition:

apiVersion: v1
kind: ConfigMap
metadata:
  name: candy-service-config
data:
  candy.cfg: |-
    candy.peppermint.power=100000000
    candy.nougat-armor.strength=10
Save and exit the file by pressing Escape followed by :wq.

Create the ConfigMap in the cluster:

kubectl apply -f candy-service-config.yml
Create a Kubernetes Secret Called db-password to Store the Database Password
Create the secret file:

vim db-password-secret.yml
Enter the following secret definition:

apiVersion: v1
kind: Secret
metadata:
  name: db-password
stringData:
  password: Kub3rn3t3sRul3s!
Save and exit the file by pressing Escape followed by :wq.

Create the secret in the cluster:

kubectl apply -f db-password-secret.yml
Now that the secret is loaded into the cluster, delete the file:

rm db-password-secret.yml
Note: In a real-world scenario, you should delete this file after creating the object since it contains sensitive data!

Create the Pod for the candy-service Application According to the Provided Specification
Create the pod definition file:

vim candy-service-pod.yml
Enter the following pod definition:

apiVersion: v1
kind: Pod
metadata:
  name: candy-service
spec:
  securityContext:
    fsGroup: 2000
  serviceAccountName: candy-svc
  containers:
  - name: candy-service
    image: linuxacademycontent/candy-service:1
    volumeMounts:
      - name: config-volume
        mountPath: /etc/candy-service
    env:
    - name: DB_PASSWORD
      valueFrom:
        secretKeyRef:
          name: db-password
          key: password
    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        memory: "128Mi"
        cpu: "500m"
  volumes:
  - name: config-volume
    configMap:
      name: candy-service-config
Save and exit the file by pressing Escape followed by :wq.

Create the pod in the cluster:

kubectl apply -f candy-service-pod.yml
Make sure your pod is up and running:

kubectl get pod candy-service
We should see it's ready and has a status of Running. (If it isn't, wait a minute or so and then run the command again.)

Conclusion
Congratulations on successfully completing this hands-on lab!

